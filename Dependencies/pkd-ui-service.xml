<?xml version="1.0"?>
<doc>
    <assembly>
        <name>pkd-ui-service</name>
    </assembly>
    <members>
        <member name="T:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse">
            <summary>
            Device use message object for sending data to the fusion server.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.#ctor(Crestron.SimplSharpPro.Fusion.FusionRoom)">
            <summary>
            Instantiates a new instance of <see cref="T:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse"/>.
            </summary>
            <param name="fusion">The Crestron fusion connection object that will be used for communication.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.AddDeviceToUseTracking(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.StartDeviceUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.StopDeviceUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.AddDisplayToUseTracking(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.StartDisplayUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.FusionDeviceUse.StopDisplayUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse">
            <summary>
            Common methods and properties for tracking device usage via Crestron Fusion.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.AddDeviceToUseTracking(System.String,System.String)">
            <summary>
            Add a device to the internal collection used for tracking use.
            </summary>
            <param name="id">The unique ID of the device to track. This will be used when starting or stopping an in-use event.</param>
            <param name="label">The user-friendly label of the device. This will be logged and displayed when reporting use statistics.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.StartDeviceUse(System.String)">
            <summary>
            start recording use time for the target device.
            </summary>
            <param name="id">The unique ID of a device that was added to the internal collection with AddDeviceToUseTracking().</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.StopDeviceUse(System.String)">
            <summary>
            Stop recording the use time for the target device and send a usage log to the Fusion server.
            </summary>
            <param name="id">The unique ID of a device that was added to the internal collection with AddDeviceToUseTracking().</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.AddDisplayToUseTracking(System.String,System.String)">
            <summary>
            Add a display to the internal collection used for tracking use statistics
            </summary>
            <param name="id">The unique id of the display to track. This will be used to locate a display when starting or stopping use tracking.</param>
            <param name="label">The user-friendly name of the display to track. This will be used in the usage report.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.StartDisplayUse(System.String)">
            <summary>
            Start recording the use time for the target display.
            </summary>
            <param name="id">The unique ID of the display to start tracking.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.DeviceUse.IFusionDeviceUse.StopDisplayUse(System.String)">
            <summary>
            Stop recording the use time for the target display and send the data to the Fusion server.
            </summary>
            <param name="id">The unique ID of the device to stop and send report for.</param>
        </member>
        <member name="T:pkd_ui_service.Fusion.ErrorManagement.FusionErrorManager">
            <summary>
            Queue-based implementation of the IFusionErrorManager interface.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Fusion.ErrorManagement.FusionErrorManager.#ctor(Crestron.SimplSharpPro.Fusion.FusionRoom)">
            <summary>
            Instantiate a new instance of <see cref="T:pkd_ui_service.Fusion.ErrorManagement.FusionErrorManager"/>.
            </summary>
            <param name="fusion">The root Fusion communication object.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.ErrorManagement.FusionErrorManager.AddOfflineDevice(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.ErrorManagement.FusionErrorManager.ClearOfflineDevice(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:pkd_ui_service.Fusion.ErrorManagement.IFusionErrorManager">
            <summary>
            Common methods and properties used for reporting errors to a Crestron Fusion server.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Fusion.ErrorManagement.IFusionErrorManager.AddOfflineDevice(System.String,System.String)">
            <summary>
            Add an offline error to the current error queue for the target device.
            </summary>
            <param name="devId">The unique ID of the device to report an error on. This will be used to locate the device when clearing an error.</param>
            <param name="devName"></param>
        </member>
        <member name="M:pkd_ui_service.Fusion.ErrorManagement.IFusionErrorManager.ClearOfflineDevice(System.String)">
            <summary>
            Remove an error from the current queue. If it is the currently displayed error then the next error in the queue
            will be sent to the server. If there are no more errors in the queue then an "OK" message will be sent to the server.
            </summary>
            <param name="devId">The unique ID of the device that was assigned when calling AddOfflineDevice().</param>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.OnlineStatusChanged">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.SystemStateChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.DisplayPowerChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.AudioMuteChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.DisplayBlankChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.DisplayFreezeChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.ProgramAudioChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.MicMuteChangeRequested">
            <inheritdoc/>
        </member>
        <member name="E:pkd_ui_service.Fusion.FusionInterface.SourceSelectRequested">
            <inheritdoc/>
        </member>
        <member name="P:pkd_ui_service.Fusion.FusionInterface.IsOnline">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateSystemState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateProgramAudioMute(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateProgramAudioLevel(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateDisplayPower(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateDisplayBlank(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateDisplayFreeze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateMicMute(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.UpdateSelectedSource(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.AddAvSource(System.String,System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.AddMicrophone(System.String,System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.AddDeviceToUseTracking(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.AddDisplayToUseTracking(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.StartDeviceUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.StopDeviceUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.StartDisplayUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.StopDisplayUse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.AddOfflineDevice(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.ClearOfflineDevice(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.Fusion.FusionInterface.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:pkd_ui_service.Fusion.IFusionInterface">
            <summary>
            Required methods, properties, and events for supporting a fusion connection in the AVF.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.OnlineStatusChanged">
            <summary>
            Triggered when the Fusion server connection comes online or goes offline.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.SystemStateChangeRequested">
            <summary>
            Triggered whenever a system power event is received from the Fusion server.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.DisplayPowerChangeRequested">
            <summary>
            Triggered whenever a display power event is received from the Fusion server.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.AudioMuteChangeRequested">
            <summary>
            Triggered whenever a program audio mute event is received from the Fusion server.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.DisplayBlankChangeRequested">
            <summary>
            Triggered whenever a "blank all displays" event is received from the Fusion server.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.DisplayFreezeChangeRequested">
            <summary>
            Triggered whenever a "freeze all displays" event is received from the Fusion server.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.ProgramAudioChangeRequested">
            <summary>
            Triggered whenever a request to change the program audio is received from the server.
            Args package will contain the 0-100 value that the level should be set to.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.MicMuteChangeRequested">
            <summary>
            Triggered whenever a request to change the mute state of a microphone is received from the Fusion server.
            Args package will contain the ID of the microphone to toggle.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Fusion.IFusionInterface.SourceSelectRequested">
            <summary>
            Triggered whenever a request to change the selected AV input is received from the Fusion server.
            Args package with contain the ID of the input source to select.
            </summary>
        </member>
        <member name="P:pkd_ui_service.Fusion.IFusionInterface.IsOnline">
            <summary>
            Gets a value indicating whether the system is connected to the Fusion server.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateSystemState(System.Boolean)">
            <summary>
            Send a notification to the Fusion server that the system use state has changed (active or standby).
            </summary>
            <param name="state">True = system is active, false = system is in standby.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateProgramAudioMute(System.Boolean)">
            <summary>
            Send a notification to the Fusion server that the program audio mute status has changed.
            </summary>
            <param name="state">True = program audio is muted (no audio), false = program audio is not muted (audio is passing).</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateProgramAudioLevel(System.UInt32)">
            <summary>
            Send a notification to the Fusion server that the program audio level has changed.
            </summary>
            <param name="level">The 0-100 value representing the new audio level.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateDisplayPower(System.Boolean)">
            <summary>
            Send a notification to the Fusion server that there is a display powered on.
            </summary>
            <param name="state">True = a display is on, false = a display is off.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateDisplayBlank(System.Boolean)">
            <summary>
            Send a notification to the Fusion server that the global video blank status has changed.
            </summary>
            <param name="state">True = video is blanked (no video), false = video is active.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateDisplayFreeze(System.Boolean)">
            <summary>
            Send a notification to the Fusion server that the global video freeze state has changed.
            </summary>
            <param name="state">True = video is frozen (no motion), false  = video is not frozen (normal output).</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.AddMicrophone(System.String,System.String,System.String[])">
            <summary>
            Add a microphone to the internal tracker used when requesting mic mute changes.
            System will look for either "podium" and assign the associated 'id' parameter to the podium mute toggle in the Fusion interface.
            Any other mic will be assigned to the generic "mic mute" trigger. If multiple mics are added to either trigger then the last mic added
            will be sent on the event.
            </summary>
            <param name="id">The unique ID of the mic to add.</param>
            <param name="label">The user-friendly name of the microphone</param>
            <param name="tags">Collection of functionality Tags associated with the mic. These will be searched for the keyword "podium".</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateMicMute(System.String,System.Boolean)">
            <summary>
            Send a notification to the Fusion server that the mute state has changed for a microphone in the system.
            </summary>
            <param name="id">The unique ID of the microphone that changed, as set in the system configuration.</param>
            <param name="state">True = mic is muted, false = mic is passing audio.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.AddAvSource(System.String,System.String,System.String[])">
            <summary>
            Add an AV source to the internal collection of sources that are selectable from the Fusion server dashboard.
            Tags assigned will be searched for keywords vga, hdmi, and pc, and then assigned to the triggers send from the server.
            </summary>
            <param name="id">The unique ID of the source to add. This will be used when sending change events.</param>
            <param name="label">The user-friendly name or label of the AV source.</param>
            <param name="tags">A Collection of functionality Tags associated with the input, usually defined in the system configuration.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.UpdateSelectedSource(System.String)">
            <summary>
            Send a notification to the Fusion server that the currently selected AV source has changed.
            </summary>
            <param name="id">The unique ID of the source that is currently routed.</param>
        </member>
        <member name="M:pkd_ui_service.Fusion.IFusionInterface.Initialize">
            <summary>
            Registers internal Fusion server objects and attempts to establish a connection.
            </summary>
        </member>
        <member name="T:pkd_ui_service.Interfaces.ICrestronUserInterface">
            <summary>
            Events, methods, and properties for an user interface that requires access to the root control system and connection
            IP-ID.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Interfaces.ICrestronUserInterface.SetCrestronControl(Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Sets the plugin connection information.
            </summary>
            <param name="control">the root entry point object that is used to establish a control connection.</param>
        </member>
        <member name="T:pkd_ui_service.Interfaces.IErrorInterface">
            <summary>
            required events, methods, and properties for implementing a user interface that supports adding errors externally.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IErrorInterface.AddDeviceError(System.String,System.String)">
            <summary>
            Add an external error to the user interface. This is used when adding error notices that are thrown by the Presentation Service
            of the framework and not the Application Service.
            </summary>
            <param name="id">the unique id of the error to add.</param>
            <param name="message">The error message to display on the UI.</param>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IErrorInterface.ClearDeviceError(System.String)">
            <summary>
            Removes an existing error from the ui.
            </summary>
            <param name="id">the unique id of the error to remove.</param>
        </member>
        <member name="T:pkd_ui_service.Interfaces.IUserInterface">
            <summary>
            required events, methods, and properties for implementing any user interface.
            </summary>
        </member>
        <member name="E:pkd_ui_service.Interfaces.IUserInterface.OnlineStatusChanged">
            <summary>
            Triggered whenever the connection to the underlying device has changed.
            </summary>
        </member>
        <member name="P:pkd_ui_service.Interfaces.IUserInterface.IsInitialized">
            <summary>
            Gets a value indicating whether the panel has been initialized and connected with the interface.
            true = is initialized, false = not yet initialized.
            </summary>
        </member>
        <member name="P:pkd_ui_service.Interfaces.IUserInterface.IsOnline">
            <summary>
            Gets a value indicating whether the connected interface hardware is online with the control system.
            True = device is online, false = devices is offline.
            </summary>
        </member>
        <member name="P:pkd_ui_service.Interfaces.IUserInterface.IsXpanel">
            <summary>
            Gets a value indicating whether the user interface is an XPanel/support interface.
            </summary>
        </member>
        <member name="P:pkd_ui_service.Interfaces.IUserInterface.Id">
            <summary>
            The unique identifier used when searching for or referencing this device.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IUserInterface.SetUiData(pkd_application_service.UserInterface.UserInterfaceDataContainer)">
            <summary>
            Prepare the interface for initialization by defining the general configuration.
            </summary>
            <param name="uiData">The configuration data object that represents the UI being created.</param>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IUserInterface.Initialize">
            <summary>
            Call once all configuration information has been set. This will prepare any internal objects for connection.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IUserInterface.Connect">
            <summary>
            Call once all necessary data as been populated and Initialize() has been successfully called. This will open a connection
            with the interface hardware.
            </summary>
        </member>
        <member name="T:pkd_ui_service.Interfaces.IUsesApplicationService">
            <summary>
            Interface for any UI implementation that requires a direct connection with the application service,
            such as a REST api server.
            </summary>
        </member>
        <member name="M:pkd_ui_service.Interfaces.IUsesApplicationService.SetApplicationService(pkd_application_service.IApplicationService)">
            <summary>
            Will set internal references for sending state commands and queries to the system application service.
            </summary>
            <param name="applicationService">The running application service for the system.</param>
            <exception cref="T:System.ArgumentNullException">If 'applicationService' is null.</exception>
        </member>
        <member name="T:pkd_ui_service.IPresentationService">
            <summary>
            minimum features of any presentation service implementation.
            </summary>
        </member>
        <member name="M:pkd_ui_service.IPresentationService.Initialize">
            <summary>
            Connect and register all interface connections.
            </summary>
        </member>
        <member name="T:pkd_ui_service.PresentationService">
            <summary>
            Root presentation implementation.
            </summary>
        </member>
        <member name="F:pkd_ui_service.PresentationService.Control">
            <summary>
            Root control system running the application.
            </summary>
        </member>
        <member name="F:pkd_ui_service.PresentationService.AppService">
            <summary>
            Core application service for managing business logic.
            </summary>
        </member>
        <member name="F:pkd_ui_service.PresentationService.UiConnections">
            <summary>
            All user interfaces in the system configuration.
            </summary>
        </member>
        <member name="F:pkd_ui_service.PresentationService.Fusion">
            <summary>
            a Fusion room connection implementation.
            </summary>
        </member>
        <member name="F:pkd_ui_service.PresentationService.Disposed">
            <summary>
            true = object is disposed, false = not disposed.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.#ctor(pkd_application_service.IApplicationService,Crestron.SimplSharpPro.CrestronControlSystem)">
            <param name="appService">The framework application implementation that handles state management.</param>
            <param name="control">the root Crestron control system object.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.Finalize">
            <inheritdoc />
        </member>
        <member name="M:pkd_ui_service.PresentationService.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.PresentationService.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:pkd_ui_service.PresentationService.Dispose(System.Boolean)">
            <summary>
            disposes of all internal component objects if they are disposable.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.BuildInterfaces">
            <summary>
            Iterate through all user interface definitions in the application service and create the associated objects
            and event subscriptions.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.SubscribeToAppService">
            <summary>
            Subscribe to all application service events for all implemented application interfaces.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UnsubscribeFromAppService">
            <summary>
            Unsubscribe from all application services that were subscribed through <see cref="M:pkd_ui_service.PresentationService.SubscribeToAppService"/>.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.SubscribeToInterface(pkd_ui_service.Interfaces.IUserInterface)">
            <summary>
            Subscribe to all user interface events for all implemented plugin interfaces.
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UnsubscribeFromInterfaces">
            <summary>
            Unsubscribe from all events handlers added by <see cref="M:pkd_ui_service.PresentationService.BuildInterfaces"/>.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.CameraAppConnectionChangeHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle camera connection change notifications from the application service.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">args.Arg = the id of the camera that updated.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.VideoWallAppConnectionChangeHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle video wall device connection status notifications from the application service.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">args.Arg = the id of the video wall that updated.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceDspConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about an audio DSP changing connection status.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the DSP that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceAudioInputMuteHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about mute state changes on inputs.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the audio channel that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceAudioOutputLevelHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about volume level changes on outputs.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the audio channel that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceAudioOutputMuteHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about mute state changes on outputs.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the audio channel that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceDisplayConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericDualEventArgs{System.String,System.Boolean})">
            <summary>
            Handle notifications from the application service about video display/projector connection status changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg1 = the id of the display that changed. Arg2 = true is online, false is offline.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceDisplayPowerHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericDualEventArgs{System.String,System.Boolean})">
            <summary>
            Handle notifications from the application service about video display/projector power status changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg1 = the id of the display that changed. Arg2 = true is on, false is off.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceEndpointConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericDualEventArgs{System.String,System.Boolean})">
            <summary>
            Handle notifications from the application service about relay or control expander endpoint connection status changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg1 = the id of the endpoint device that changed. Arg2 = true is online, false is offline.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceRouteHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about video routing events.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the destination that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceRouterConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle notifications from the application service about AVR connection status changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg = the id of the AVR that updated.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceLightingConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericDualEventArgs{System.String,System.Boolean})">
            <summary>
            Handle notifications from the application service about lighting controller connection status changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = the id of the lighting controller that updated.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceGlobalFreezeHandler(System.Object,System.EventArgs)">
            <summary>
            Handle notifications from the application service about global/AVR video freeze changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = the id of the lighting controller that updated.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceGlobalBlankHandler(System.Object,System.EventArgs)">
            <summary>
            Handle notifications from the application service about global/AVR video blank events.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Generic empty event args.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.AppServiceStateChangeHandler(System.Object,System.EventArgs)">
            <summary>
            Handle notifications from the application service about global/AVR video blank events.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Generic empty event args.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UiConnectionHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle user interface connection changes.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="args">Arg1 = The id of the user interface that changed.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionRouteSourceHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle route requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = the id of the source to route to all video destinations</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionAudioLevelHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.UInt32})">
            <summary>
            Handle route requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = the id of the source to route to all video destinations</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionAudioMuteHandler(System.Object,System.EventArgs)">
            <summary>
            Handle program audio mute state change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Empty args package.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionDisplayFreezeHandler(System.Object,System.EventArgs)">
            <summary>
            Handle global video freeze change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Empty args package.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionDisplayBlankHandler(System.Object,System.EventArgs)">
            <summary>
            Handle global video blank change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Empty args package.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionDisplayPowerHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.Boolean})">
            <summary>
            Handle display power change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = true for on, false for off.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionPowerHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.Boolean})">
            <summary>
            Handle system use state change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = true for set active, false for set standby.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionMicMuteHandler(System.Object,pkd_common_utils.GenericEventArgs.GenericSingleEventArgs{System.String})">
            <summary>
            Handle mic mute change requests from a <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> ui.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Arg = the id of the microphone to toggle.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.FusionConnectionHandler(System.Object,System.EventArgs)">
            <summary>
            Handle <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> device online/offline state change events.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Empty args package.</param>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UpdateFusionDisplayPowerFeedback">
            <summary>
            update all <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> devices with the current system use state.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UpdateFusionAudioFeedback">
            <summary>
            Update all <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> devices with the current state of program audio level and mute.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UpdateFusionRoutingFeedback">
            <summary>
            Update all <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> devices with the current video route status.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationService.UpdateFusionFeedback">
            <summary>
            Update all <see cref="T:pkd_ui_service.Fusion.IFusionInterface"/> devices with all supported feedback.
            </summary>
        </member>
        <member name="T:pkd_ui_service.PresentationServiceFactory">
            <summary>
            Helper class for creating presentation service objects.
            </summary>
        </member>
        <member name="M:pkd_ui_service.PresentationServiceFactory.CreatePresentationService(pkd_application_service.IApplicationService,Crestron.SimplSharpPro.CrestronControlSystem)">
            <summary>
            Creates a full presentation service object that hooks into the application service events.
            </summary>
            <param name="appService">The base application service used to control business logic.</param>
            <param name="control">The control system entry point for this program.</param>
            <returns>A Presentation service that can be initialized for interacting with user interface hardware.</returns>
        </member>
    </members>
</doc>
